#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.11f
# In conjunction with Tcl version 8.6
#    Feb 28, 2018 03:54:22 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import searcher_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    searcher_support.set_Tk_var()
    top = Searcher (root)
    searcher_support.init(root, top)
    root.mainloop()

w = None
def create_Searcher(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    searcher_support.set_Tk_var()
    top = Searcher (w)
    searcher_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Searcher():
    global w
    w.destroy()
    w = None


class Searcher:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("769x541+224+120")
        top.title("Searcher")
        top.configure(highlightcolor="black")



        self.frameTop = Frame(top)
        self.frameTop.place(relx=0.0, rely=0.01, relheight=0.49, relwidth=0.99)
        self.frameTop.configure(relief=GROOVE)
        self.frameTop.configure(borderwidth="2")
        self.frameTop.configure(relief=GROOVE)
        self.frameTop.configure(width=765)

        self.Label1 = Label(self.frameTop)
        self.Label1.place(relx=0.05, rely=0.1, height=19, width=99)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Path to search:''')

        self.txtPath = Entry(self.frameTop)
        self.txtPath.place(relx=0.18, rely=0.08,height=31, relwidth=0.52)
        self.txtPath.configure(background="white")
        self.txtPath.configure(font="TkFixedFont")
        self.txtPath.configure(selectbackground="#c4c4c4")
        self.txtPath.configure(textvariable=searcher_support.FilePath)

        self.btnSearchPath = Button(self.frameTop)
        self.btnSearchPath.place(relx=0.71, rely=0.08, height=27, width=38)
        self.btnSearchPath.configure(activebackground="#d9d9d9")
        self.btnSearchPath.configure(command=searcher_support.OnBtnSearchPath)
        self.btnSearchPath.configure(text='''...''')

        self.btnExit = Button(self.frameTop)
        self.btnExit.place(relx=0.85, rely=0.08, height=37, width=79)
        self.btnExit.configure(activebackground="#d9d9d9")
        self.btnExit.configure(text='''Exit''')
        self.btnExit.bind('<Button-1>',lambda e:searcher_support.OnBtnExit(e))

        self.Labelframe1 = LabelFrame(self.frameTop)
        self.Labelframe1.place(relx=0.09, rely=0.23, relheight=0.7
                , relwidth=0.33)
        self.Labelframe1.configure(relief=GROOVE)
        self.Labelframe1.configure(text='''Audio Files''')
        self.Labelframe1.configure(width=250)

        self.chkMP3 = Checkbutton(self.Labelframe1)
        self.chkMP3.place(relx=0.12, rely=0.16, relheight=0.11, relwidth=0.22)
        self.chkMP3.configure(activebackground="#d9d9d9")
        self.chkMP3.configure(anchor=W)
        self.chkMP3.configure(justify=LEFT)
        self.chkMP3.configure(text='''.MP3''')
        self.chkMP3.configure(variable=searcher_support.VchkMP3)

        self.chkWAV = Checkbutton(self.Labelframe1)
        self.chkWAV.place(relx=0.12, rely=0.27, relheight=0.11, relwidth=0.23)
        self.chkWAV.configure(activebackground="#d9d9d9")
        self.chkWAV.configure(anchor=W)
        self.chkWAV.configure(justify=LEFT)
        self.chkWAV.configure(text='''.WAV''')
        self.chkWAV.configure(variable=searcher_support.VchkWAV)

        self.chkOGG = Checkbutton(self.Labelframe1)
        self.chkOGG.place(relx=0.12, rely=0.38, relheight=0.11, relwidth=0.23)
        self.chkOGG.configure(activebackground="#d9d9d9")
        self.chkOGG.configure(justify=LEFT)
        self.chkOGG.configure(text='''.OGG''')
        self.chkOGG.configure(variable=searcher_support.VchkOGG)

        self.Labelframe2 = LabelFrame(self.frameTop)
        self.Labelframe2.place(relx=0.42, rely=0.23, relheight=0.7
                , relwidth=0.33)
        self.Labelframe2.configure(relief=GROOVE)
        self.Labelframe2.configure(text='''Video Files''')
        self.Labelframe2.configure(width=270)

        self.chkAVI = Checkbutton(self.Labelframe2)
        self.chkAVI.place(relx=0.08, rely=0.16, relheight=0.11, relwidth=0.2)
        self.chkAVI.configure(activebackground="#d9d9d9")
        self.chkAVI.configure(anchor=W)
        self.chkAVI.configure(justify=LEFT)
        self.chkAVI.configure(text='''.AVI''')
        self.chkAVI.configure(variable=searcher_support.VchkAVI)

        self.chkMKV = Checkbutton(self.Labelframe2)
        self.chkMKV.place(relx=0.08, rely=0.27, relheight=0.11, relwidth=0.22)
        self.chkMKV.configure(activebackground="#d9d9d9")
        self.chkMKV.configure(anchor=W)
        self.chkMKV.configure(justify=LEFT)
        self.chkMKV.configure(text='''.MKV''')
        self.chkMKV.configure(variable=searcher_support.VchkMKV)

        self.chkMP4 = Checkbutton(self.Labelframe2)
        self.chkMP4.place(relx=0.08, rely=0.38, relheight=0.11, relwidth=0.22)
        self.chkMP4.configure(activebackground="#d9d9d9")
        self.chkMP4.configure(anchor=W)
        self.chkMP4.configure(justify=LEFT)
        self.chkMP4.configure(text='''.MP4''')
        self.chkMP4.configure(variable=searcher_support.VchkMP4)

        self.btnGo = Button(self.frameTop)
        self.btnGo.place(relx=0.79, rely=0.49, height=27, width=49)
        self.btnGo.configure(activebackground="#d9d9d9")
        self.btnGo.configure(text='''GO!''')
        self.btnGo.bind('<Button-1>',lambda e:searcher_support.OnBtnGo(e))

        self.frameTreeview = Frame(top)
        self.frameTreeview.place(relx=0.0, rely=0.5, relheight=0.49
                , relwidth=0.99)
        self.frameTreeview.configure(relief=GROOVE)
        self.frameTreeview.configure(borderwidth="2")
        self.frameTreeview.configure(relief=GROOVE)
        self.frameTreeview.configure(width=761)

        self.style.configure('Treeview.Heading',  font="TkDefaultFont")
        self.Scrolledtreeview1 = ScrolledTreeView(self.frameTreeview)
        self.Scrolledtreeview1.place(relx=0.0, rely=0.0, relheight=0.98
                , relwidth=0.99)
        self.Scrolledtreeview1.configure(columns="Col1")
        self.Scrolledtreeview1.heading("#0",text="Tree")
        self.Scrolledtreeview1.heading("#0",anchor="center")
        self.Scrolledtreeview1.column("#0",width="370")
        self.Scrolledtreeview1.column("#0",minwidth="20")
        self.Scrolledtreeview1.column("#0",stretch="1")
        self.Scrolledtreeview1.column("#0",anchor="w")
        self.Scrolledtreeview1.heading("Col1",text="Col1")
        self.Scrolledtreeview1.heading("Col1",anchor="center")
        self.Scrolledtreeview1.column("Col1",width="371")
        self.Scrolledtreeview1.column("Col1",minwidth="20")
        self.Scrolledtreeview1.column("Col1",stretch="1")
        self.Scrolledtreeview1.column("Col1",anchor="w")
        self.Scrolledtreeview1.bind('<Button-1>',lambda e:searcher_support.OnTreeviewClick(e))





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


if __name__ == '__main__':
    vp_start_gui()




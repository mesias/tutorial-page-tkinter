#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.5
#  in conjunction with Tcl version 8.6
#    Nov 08, 2020 04:19:14 PM -03  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import SecondApp_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    SecondApp_support.set_Tk_var()
    top = Toplevel1 (root)
    SecondApp_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    SecondApp_support.set_Tk_var()
    top = Toplevel1 (w)
    SecondApp_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("517x386+427+179")
        top.minsize(120, 1)
        top.maxsize(1284, 781)
        top.resizable(1,  1)
        top.title("Widget Demo 1")
        top.configure(highlightcolor="black")

        self.frameTop = tk.Frame(top)
        self.frameTop.place(relx=0.002, rely=0.0, relheight=0.197
                , relwidth=0.996)
        self.frameTop.configure(relief='groove')
        self.frameTop.configure(borderwidth="2")
        self.frameTop.configure(relief="groove")

        self.Label1 = tk.Label(self.frameTop)
        self.Label1.place(relx=0.058, rely=0.263, height=41, width=146)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Entry or SINGLE LINE Text Widget:''')
        self.Label1.configure(wraplength="110")

        self.entryExample = tk.Entry(self.frameTop)
        self.entryExample.place(relx=0.324, rely=0.395, height=20
                , relwidth=0.318)
        self.entryExample.configure(background="white")
        self.entryExample.configure(font="-family {Bitstream Vera Sans} -size 12")
        self.entryExample.configure(selectbackground="#c4c4c4")
        self.entryExample.configure(textvariable=SecondApp_support.entryText)

        self.btnGetText = tk.Button(self.frameTop)
        self.btnGetText.place(relx=0.699, rely=0.263, height=29, width=103)
        self.btnGetText.configure(activebackground="#d9d9d9")
        self.btnGetText.configure(pady="0")
        self.btnGetText.configure(text='''Get The Text''')
        self.btnGetText.bind('<Button-1>',lambda e:SecondApp_support.btnGetText_lclick(e))

        self.lframeRadioButtons = tk.LabelFrame(top)
        self.lframeRadioButtons.place(relx=0.002, rely=0.199, relheight=0.609
                , relwidth=0.426)
        self.lframeRadioButtons.configure(relief='groove')
        self.lframeRadioButtons.configure(text='''Radio Buttons''')

        self.rbRed = tk.Radiobutton(self.lframeRadioButtons)
        self.rbRed.place(relx=0.227, rely=0.213, relheight=0.098, relwidth=0.255
                , bordermode='ignore')
        self.rbRed.configure(activebackground="#d9d9d9")
        self.rbRed.configure(justify='left')
        self.rbRed.configure(text='''Red''')
        self.rbRed.configure(value="Red")
        self.rbRed.configure(variable=SecondApp_support.Colors)

        self.rbBlue = tk.Radiobutton(self.lframeRadioButtons)
        self.rbBlue.place(relx=0.227, rely=0.34, relheight=0.098, relwidth=0.273
                , bordermode='ignore')
        self.rbBlue.configure(activebackground="#d9d9d9")
        self.rbBlue.configure(justify='left')
        self.rbBlue.configure(text='''Blue''')
        self.rbBlue.configure(value="Blue")
        self.rbBlue.configure(variable=SecondApp_support.Colors)

        self.rbGreen = tk.Radiobutton(self.lframeRadioButtons)
        self.rbGreen.place(relx=0.227, rely=0.468, relheight=0.098
                , relwidth=0.318, bordermode='ignore')
        self.rbGreen.configure(activebackground="#d9d9d9")
        self.rbGreen.configure(justify='left')
        self.rbGreen.configure(text='''Green''')
        self.rbGreen.configure(value="Green")
        self.rbGreen.configure(variable=SecondApp_support.Colors)

        self.lblRbInfo = tk.Label(self.lframeRadioButtons)
        self.lblRbInfo.place(relx=0.227, rely=0.638, height=21, width=114
                , bordermode='ignore')
        self.lblRbInfo.configure(activebackground="#f9f9f9")
        self.lblRbInfo.configure(relief="sunken")
        self.lblRbInfo.configure(textvariable=SecondApp_support.Colors)

        self.lframeCheckBoxes = tk.LabelFrame(top)
        self.lframeCheckBoxes.place(relx=0.553, rely=0.199, relheight=0.609
                , relwidth=0.445)
        self.lframeCheckBoxes.configure(relief='groove')
        self.lframeCheckBoxes.configure(text='''Check Boxes''')

        self.chkApples = tk.Checkbutton(self.lframeCheckBoxes)
        self.chkApples.place(relx=0.174, rely=0.17, relheight=0.098
                , relwidth=0.309, bordermode='ignore')
        self.chkApples.configure(activebackground="#d9d9d9")
        self.chkApples.configure(justify='left')
        self.chkApples.configure(text='''Apples''')
        self.chkApples.configure(variable=SecondApp_support.che39)

        self.chkBananas = tk.Checkbutton(self.lframeCheckBoxes)
        self.chkBananas.place(relx=0.174, rely=0.306, relheight=0.098
                , relwidth=0.361, bordermode='ignore')
        self.chkBananas.configure(activebackground="#d9d9d9")
        self.chkBananas.configure(justify='left')
        self.chkBananas.configure(text='''Bananas''')
        self.chkBananas.configure(variable=SecondApp_support.che40)

        self.chkGrapes = tk.Checkbutton(self.lframeCheckBoxes)
        self.chkGrapes.place(relx=0.174, rely=0.451, relheight=0.098
                , relwidth=0.317, bordermode='ignore')
        self.chkGrapes.configure(activebackground="#d9d9d9")
        self.chkGrapes.configure(justify='left')
        self.chkGrapes.configure(text='''Grapes''')
        self.chkGrapes.configure(variable=SecondApp_support.che41)

        self.btnPrintChecks = tk.Button(self.lframeCheckBoxes)
        self.btnPrintChecks.place(relx=0.261, rely=0.723, height=24, width=117
                , bordermode='ignore')
        self.btnPrintChecks.configure(activebackground="#d9d9d9")
        self.btnPrintChecks.configure(pady="0")
        self.btnPrintChecks.configure(text='''Print Checks''')
        self.btnPrintChecks.bind('<Button-1>',lambda e:SecondApp_support.btnGetChecks_lclick(e))

        self.frameBottom = tk.Frame(top)
        self.frameBottom.place(relx=0.002, rely=0.811, relheight=0.187
                , relwidth=0.996)
        self.frameBottom.configure(relief='groove')
        self.frameBottom.configure(borderwidth="2")
        self.frameBottom.configure(relief="groove")

        self.btnExit = tk.Button(self.frameBottom)
        self.btnExit.place(relx=0.383, rely=0.361, height=24, width=99)
        self.btnExit.configure(activebackground="#d9d9d9")
        self.btnExit.configure(pady="0")
        self.btnExit.configure(text='''Exit''')
        self.btnExit.bind('<Button-1>',lambda e:SecondApp_support.btnExit_lclick(e))

if __name__ == '__main__':
    vp_start_gui()






#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.10.1a1
# In conjunction with Tcl version 8.6
#    Feb 03, 2018 12:05:09 PM
#======================================================
#    searcher_support.py
#------------------------------------------------------
# Created for the Page Tutorial Project
# Written by G.D. Walters
# Copyright (c) 2018 by G.D. Walters
# This source code is released under the MIT License 
# (See MIT_License.txt)
#======================================================

import sys
import platform
import os
from os.path import join,getsize,exists
import vlcplayer

try:
    from Tkinter import *
    import tkMessageBox
    import tkFont
    import tkFileDialog
except ImportError:
    from tkinter import *
    from tkinter import messagebox
    from tkinter import font
    from tkinter import filedialog

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    global FilePath
    FilePath = StringVar()
    global VchkMP3
    VchkMP3 = StringVar()
    global VchkWAV
    VchkWAV = StringVar()
    global VchkOGG
    VchkOGG = StringVar()
    global VchkAVI
    VchkAVI = StringVar()
    global VchkMKV
    VchkMKV = StringVar()
    global VchkMP4
    VchkMP4 = StringVar()

def OnBtnExit(p1):
    print('searcher_support.OnBtnExit')
    sys.stdout.flush()
    destroy_window()

def OnBtnGo(p1):
    print('Searcher_support.OnBtnGo')
    sys.stdout.flush()
    ClearDataGrid()
    busyStart()
    BuildExts()
    fp = FilePath.get()
    e1 = tuple(exts)
    #Clear the list in case user wants to "go" again
    del FileList[:] # under python 3.3, you can use list.clear()
    Walkit(fp,e1)
    LoadDataGrid()     
    busyEnd()

def OnBtnSearchPath():
    print('Searcher_support.OnBtnSearchPath')
    sys.stdout.flush()
    if (py3 == 1) or (py3 == True):
        path = filedialog.askdirectory() 
    else:
        path = tkFileDialog.askdirectory() 
    FilePath.set(path) 

def OnTreeviewClick(e):
    print('Searcher_Support.OnTreeviewClick')
    sys.stdout.flush()
    # We will use this in the next chapter.
    row = treeview.identify_row(e.y)
    col = treeview.identify_column(e.x)
    filename = treeview.set(row,0)
    path = treeview.set(row,1)
    vlcplayer.create_VLC_Player(root,[path,filename])
    
def BlankChecks():
    VchkAVI.set('0')
    VchkMKV.set('0')
    VchkMP3.set('0')
    VchkMP4.set('0')
    VchkOGG.set('0')
    VchkWAV.set('0')
    
def BuildExts():
    del exts[:]  # Clear the extentions list, then rebuild it...
    if VchkAVI.get() == '1':
        exts.append(".avi")
    if VchkMKV.get() == '1':
        exts.append(".mkv")
    if VchkMP3.get() == '1':
        exts.append(".mp3")
    if VchkMP4.get() == '1':
        exts.append(".mp4")
    if VchkOGG.get() == '1':
        exts.append(".ogg")
    if VchkWAV.get() == '1':
        exts.append(".wav")
        
def busyStart(newcursor=None):
    global preBusyCursors
    print('busyStart')
    if not newcursor:
        newcursor = busyCursor
    newPreBusyCursors = {}
    for component in busyWidgets:
        newPreBusyCursors[component] = component['cursor']
        component.configure(cursor=newcursor)
        component.update_idletasks()
    preBusyCursors = (newPreBusyCursors, preBusyCursors)
            
def busyEnd():
    global preBusyCursors
    print('busyEnd')
    if not preBusyCursors:
        return
    oldPreBusyCursors = preBusyCursors[0]
    preBusyCursors = preBusyCursors[1]
    for component in busyWidgets:
        try:
            component.configure(cursor=oldPreBusyCursors[component])
        except KeyError:
            pass
        component.update_idletasks()

def Walkit(musicpath,extensions):
    rcntr = 0
    fl = []
    for root, dirs, files in os.walk(musicpath):
        rcntr += 1  # This is the number of folders we have walked
        for file in [f for f in files if f.endswith(extensions)]:
            fl.append(file)
            fl.append(root)
            FileList.append(fl)
            fl=[]
        
def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    # Our code starts here
    global treeview, exts, FileList
    exts = []
    FilePath=StringVar()
    FileList=[]
    #-------------    
    BlankChecks()    
    treeview = w.Scrolledtreeview1
    SetupTreeview()
    #-------------
    global busyCursor,preBusyCursors,busyWidgets
    busyCursor = 'watch'
    preBusyCursors = None
    busyWidgets = (root, )   
    
def SetupTreeview():
    global ColHeads
    ColHeads = ['Filename','Path']
    treeview.configure(columns=ColHeads, show="headings")
    for col in ColHeads:
        treeview.heading(col,text=col.title(),command=lambda c = col: sortby(treeview,c,0))
        ## adjust the column's width to the header string
        if (py3 == 1) or (py3 == True):
            treeview.column(col, width = font.Font().measure(col.title()))
        else:
            treeview.column(col, width = tkFont.Font().measure(col.title()))

def ClearDataGrid():
    #print("Into ClearDataGrid")
    for c in treeview.get_children(''):
        treeview.delete(c)

def LoadDataGrid():
    global ColHeads
    ClearDataGrid()             
    for c in FileList:
        treeview.insert('','end',values=c)
        # adjust column's width if necessary to fit each value
        for ix, val in enumerate(c):
            if (py3 == 1) or (py3 == True):
                col_w = font.Font().measure(val)
            else:
                col_w = tkFont.Font().measure(val)
            if treeview.column(ColHeads[ix],width=None)<col_w:
                treeview.column(ColHeads[ix], width=col_w)

def sortby(tree, col, descending):
    """sort tree contents when a column header is clicked on"""
    # grab values to sort
    data = [(tree.set(child, col), child) \
        for child in tree.get_children('')]
    # if the data to be sorted is numeric change to float
    #data =  change_numeric(data)
    # now sort the data in place
    data.sort(reverse=descending)
    for ix, item in enumerate(data):
        tree.move(item[1], '', ix)
    # switch the heading so it will sort in the opposite direction
    tree.heading(col, command=lambda col=col: sortby(tree, col, \
        int(not descending)))
        
def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import searcher
    searcher.vp_start_gui()



#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.10.1a1
# In conjunction with Tcl version 8.6
#    Feb 03, 2018 12:34:57 PM

#======================================================
#    vlcplayer_support.py
#------------------------------------------------------
# Created for the Page Tutorial Project
# Written by G.D. Walters
# Copyright (c) 2018 by G.D. Walters
# This source code is released under the MIT License 
# (See MIT_License.txt)
#======================================================

# Import the VLC library
import vlc
# Import the standard libraries
import sys
import os
import pathlib
import time
import platform
import GenAboutBox

try:
    from Tkinter import *
    import tkFileDialog
    import tkMessageBox     
except ImportError:
    from tkinter import *
    from tkinter import messagebox
    from tkinter import font
    from tkinter import filedialog

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    global ScaleVar
    ScaleVar = DoubleVar()
    global VolumeVar
    VolumeVar = DoubleVar()

def OnBtnMute(p1):
    sys.stdout.flush()
    is_mute = player.audio_get_mute()
    print("is_mute = {0}".format(is_mute))
    if is_mute == 1:
        w.btnMute.config(text = 'Mute')
    else:
        w.btnMute.config(text = 'Unmute')
    player.audio_set_mute(not is_mute)
    VolumeVar.set(player.audio_get_volume())

def OnBtnPause(p1):
    print('vlcplayer_support.OnBtnPause')
    sys.stdout.flush()
    player.pause()
    
def OnBtnPlay(p1 = None):
    sys.stdout.flush()
    global Timer_id

    if not player.get_media():
        OnOpen()
    else:
        # Try to launch the media, if this fails display an error message
        if player.play() == -1:
            errorDialog("Unable to play.")
    Timer_id = root.after(0,OnTick())

def OnBtnStop(p1):
    sys.stdout.flush()
    player.stop()
    # reset the time slider
    w.TimeSlider.set(0)

def ScaleSel(*args):
    global timeslider_last_update, timeslider_last_val
    sys.stdout.flush()
    if player == None:
        return
    nval = ScaleVar.get()
    sval = str(nval)
    if timeslider_last_val != sval:

        timeslider_last_update = time.time()
        mval = "%.0f" % (nval * 1000)
        player.set_time(int(mval)) # expects milliseconds

def VolumeSel(*args):
    if player == None:
        return
    volume = int(VolumeVar.get())
    if volume > 100:
        volume = 100
    elif volume == 0:
        volume = 70
    resp = player.audio_set_volume(volume)	

def mnuFileExit():
    print('vlcplayer_support.mnuFileExit')
    sys.stdout.flush()
    destroy_window()
    
def mnuFileOpen():
    print('vlcplayer_support.mnuFileOpen')
    sys.stdout.flush()
    OnOpen()
    
def mnuHelpAbout():
    print('vlcplayer_support.mnuHelpAbout')
    sys.stdout.flush()
    # Our code from here down
    copyright_symbol = u"\u00A9"
    ProgName = "VLC Player"
    Author = "G.D. Walters"
    Version = '0.9'
    Copyright = "Copyright " + copyright_symbol + " 2018 by G.D. Walters"
    Info = "Media player using the VLC Library for Python."
    GenAboutBox.create_About(root,[ProgName,Author,Version,Copyright,Info])

def OnOpen():
    p = pathlib.Path(os.path.expanduser("~"))
    if (py3 == 1) or (py3 == True):
        fullname = filedialog.askopenfilename(initialdir = p, title = "choose your file",filetypes = (("all files","*.*"),("mp4 files","*.mp4")))
    else:    
        fullname = tkFileDialog.askopenfilename(initialdir = p, title = "choose your file",filetypes = (("all files","*.*"),("mp4 files","*.mp4")))
    if os.path.isfile(fullname):
        dirname  = os.path.dirname(fullname)
        filename = os.path.basename(fullname)
        print("{0} - {1}".format(dirname,filename))
        Media = Instance.media_new(str(os.path.join(dirname, filename)))
        player.set_media(Media)
        if platform.system() == 'Windows':
            player.set_hwnd(self.GetHandle())
        else:
            player.set_xwindow(GetHandle())
        OnBtnPlay()   
def OnTick():
    global timeslider_last_update, timeslider_last_val, Timer_id
    if player == None:
        return
	# since the self.player.get_length can change while playing,
	# re-set the timeslider to the correct range.
    length = player.get_length()
    dbl = length * 0.001
    w.TimeSlider.config(to=dbl)
    # update the time on the slider
    tyme = player.get_time()
    if tyme == -1:
        tyme = 0
    dbl = tyme * 0.001
    timeslider_last_val = ("%.0f" % dbl) + ".0"
	# don't want to programatically change slider while user is messing with it.
	# wait 2 seconds after user lets go of slider
    if time.time() > (timeslider_last_update + 2.0):
        w.TimeSlider.set(dbl)	
    Timer_id = root.after(1000,OnTick)
    
def GetHandle():
    return w.Canvas1.winfo_id()
    
def errorDialog(errormessage):
   tkMessageBox.showerror('Error',errormessage)    
                            
def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

    global Instance, player
    global timeslider_last_val, timeslider_last_update
    timeslider_last_val = 0
    timeslider_last_update = 0
    Instance = vlc.Instance()
    player = Instance.media_player_new()
    if len(args) != 0:
        temp = list(args)[0]
        dirname = temp[0]
        filename = temp[1]
        Media = Instance.media_new(str(os.path.join(dirname, filename)))
        player.set_media(Media)
        if platform.system() == 'Windows':
            player.set_hwnd(self.GetHandle())
        else:
            player.set_xwindow(GetHandle())
        OnBtnPlay()  
    else:
        OnOpen()
    VolumeVar.set(70)
    
def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import vlcplayer
    vlcplayer.vp_start_gui()


